{"version":3,"sources":["components/MyMap.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["MyMapComponent","compose","withProps","googleMapURL","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","props","lib","defaultZoom","defaultCenter","lat","lng","isMarkerShown","position","onClick","onMarkerClick","MyMap","state","delayedShowMarker","setTimeout","_this","setState","handleMarkerClick","this","React","PureComponent","App","components_MyMap","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQASMA,EAAiBC,YACrBC,YAAU,CACRC,aACE,8FACFC,eAAgBC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,UACpCC,iBAAkBL,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,WACtCE,WAAYN,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,YAElCG,eACAC,gBATqBZ,CAUrB,SAAAa,GAAK,OACLT,EAAAC,EAAAC,cAACQ,EAAA,UAAD,CAAWC,YAAa,EAAGC,cAAe,CAAEC,KAAM,OAAQC,IAAK,UAC5DL,EAAMM,eACLf,EAAAC,EAAAC,cAACQ,EAAA,OAAD,CACEM,SAAU,CAAEH,KAAM,OAAQC,IAAK,SAC/BG,QAASR,EAAMS,mBAmCRC,6MA5BbC,MAAQ,CACNL,eAAe,KAOjBM,kBAAoB,WAClBC,WAAW,WACTC,EAAKC,SAAS,CAAET,eAAe,KAC9B,QAGLU,kBAAoB,WAClBF,EAAKC,SAAS,CAAET,eAAe,IAC/BQ,EAAKF,wGAXLK,KAAKL,qDAeL,OACErB,EAAAC,EAAAC,cAACP,EAAD,CACEoB,cAAeW,KAAKN,MAAML,cAC1BG,cAAeQ,KAAKD,2BAxBRE,IAAMC,eCrBXC,mLAJX,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,aAFOC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c30a1c98.chunk.js","sourcesContent":["import React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\n\nconst MyMapComponent = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDu2lXe6b5E55W6iKajZbZ0jB5Im0Byk3M&v=3.exp\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props => (\n  <GoogleMap defaultZoom={8} defaultCenter={{ lat: -34.397, lng: 150.644 }}>\n    {props.isMarkerShown && (\n      <Marker\n        position={{ lat: -34.397, lng: 150.644 }}\n        onClick={props.onMarkerClick}\n      />\n    )}\n  </GoogleMap>\n));\n\nclass MyMap extends React.PureComponent {\n  state = {\n    isMarkerShown: false\n  };\n\n  componentDidMount() {\n    this.delayedShowMarker();\n  }\n\n  delayedShowMarker = () => {\n    setTimeout(() => {\n      this.setState({ isMarkerShown: true });\n    }, 3000);\n  };\n\n  handleMarkerClick = () => {\n    this.setState({ isMarkerShown: false });\n    this.delayedShowMarker();\n  };\n\n  render() {\n    return (\n      <MyMapComponent\n        isMarkerShown={this.state.isMarkerShown}\n        onMarkerClick={this.handleMarkerClick}\n      />\n    );\n  }\n}\nexport default MyMap;\n","import React, { Component } from \"react\";\nimport MyMap from \"./components/MyMap\";\n\nclass App extends Component {\n  render() {\n    return <MyMap />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}