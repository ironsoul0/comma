{"version":3,"sources":["methods/drawHelpers.js","components/MapComponent.jsx","methods/readFile.js","components/MyMap.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["colorFromName","name","col_str","Math","floor","abs","split","reduce","a","b","charCodeAt","toString","length","MapComponent","compose","withProps","googleMapURL","loadingElement","react_default","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","props","lib","defaultZoom","defaultCenter","lat","lng","isMarkerShown","position","onClick","onMarkerClick","path","coords","onLineClick","geodesic","options","strokeColor","strokeOpacity","strokeWeight","zIndex","readFile","filename","fetch","then","response","status","Error","concat","MyMap","state","data","delayedShowMarker","setTimeout","_this","setState","handleMarkerClick","handleLineClick","e","console","log","this","_this2","json","start_time","catch","components_MapComponent","React","PureComponent","App","components_MyMap","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAYeA,EAZO,SAAAC,GAQpB,IAPA,IAMIC,GADMC,KAAKC,MAAM,SAAWD,KAAKE,IAAYJ,EAJ3CK,MAAM,IAAIC,OAAO,SAACC,EAAGC,GAEvB,OADAD,GAAKA,GAAK,GAAKA,EAAIC,EAAEC,WAAW,IACrBF,GACV,KACsD,UACzCG,SAAS,IACpBT,EAAQU,OAAS,GAAGV,EAAU,IAAMA,EAC3C,MAAO,IAAMA,GCmCAW,EAhCMC,YACnBC,YAAU,CACRC,aACE,8FACFC,eAAgBC,EAAAV,EAAAW,cAAA,OAAKC,MAAO,CAAEC,OAAM,UACpCC,iBAAkBJ,EAAAV,EAAAW,cAAA,OAAKC,MAAO,CAAEC,OAAM,WACtCE,WAAYL,EAAAV,EAAAW,cAAA,OAAKC,MAAO,CAAEC,OAAM,YAElCG,eACAC,gBATmBX,CAUnB,SAAAY,GAAK,OACLR,EAAAV,EAAAW,cAACQ,EAAA,UAAD,CAAWC,YAAa,GAAIC,cAAe,CAAEC,IAAK,QAASC,KAAM,QAC9DL,EAAMM,eACLd,EAAAV,EAAAW,cAACQ,EAAA,OAAD,CACEM,SAAU,CAAEH,IAAK,OAAQC,KAAM,SAC/BG,QAASR,EAAMS,gBAGnBjB,EAAAV,EAAAW,cAACQ,EAAA,SAAD,CACES,KAAMV,EAAMW,OACZH,QAASR,EAAMY,YACfC,UAAU,EACVC,QAAS,CACPC,YAAazC,EAAc0B,EAAMzB,MACjCyC,cAAe,GACfC,aAAc,IACdC,OAAQ,QC3BDC,EAXE,SAAAC,GAEf,OAAOC,MADQ,iBACOD,GAAUE,KAAK,SAAAC,GACnC,GAAwB,MAApBA,EAASC,OACX,OAAOD,EAEP,MAAM,IAAIE,MAAJ,GAAAC,OAAaH,EAASC,OAAtB,cCoDGG,6MApDbC,MAAQ,CACNtB,eAAe,EACfK,OAAQ,GACRkB,KAAM,GACNtD,KAAM,MAqBRuD,kBAAoB,WAClBC,WAAW,WACTC,EAAKC,SAAS,CAAE3B,eAAe,KAC9B,QAGL4B,kBAAoB,WAClBF,EAAKC,SAAS,CAAE3B,eAAe,IAC/B0B,EAAKF,uBAGPK,gBAAkB,SAAAC,GAChBC,QAAQC,IAAIF,uFA7BZG,KAAKT,iEAGc,IAAAU,EAAAD,KACnBpB,EAAS,6BACNG,KAAK,SAAAC,GAAQ,OAAIA,EAASkB,SAC1BnB,KAAK,SAAAO,GAMJ,OALAW,EAAKP,SAAS,CACZJ,OACAlB,OAAQkB,EAAKlB,OACbpC,KAAMsD,EAAKa,aAENb,IAERc,MAAMN,QAAQC,sCAmBjB,OACE9C,EAAAV,EAAAW,cAACmD,EAAD,CACEtC,cAAeiC,KAAKX,MAAMtB,cAC1BG,cAAe8B,KAAKL,kBACpBvB,OAAQ4B,KAAKX,MAAMjB,OACnBC,YAAa2B,KAAKJ,gBAClB5D,KAAMgE,KAAKX,MAAMrD,cAhDLsE,IAAMC,eCIXC,mLAJX,OAAOvD,EAAAV,EAAAW,cAACuD,EAAD,aAFOC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAV,EAAAW,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.1062384f.chunk.js","sourcesContent":["const colorFromName = name => {\n  const getHash = str =>\n    str.split(\"\").reduce((a, b) => {\n      a = (a << 5) - a + b.charCodeAt(0);\n      return a & a;\n    }, 0);\n  let num = Math.floor(15239017 * Math.abs(getHash(name))) % 16777215;\n  let col_str = num.toString(16);\n  while (col_str.length < 6) col_str = \"0\" + col_str;\n  return \"#\" + col_str;\n};\n\nexport default colorFromName;\n","import React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  Polyline\n} from \"react-google-maps\";\n\nimport colorFromName from \"../methods/drawHelpers\";\n\nconst MapComponent = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDu2lXe6b5E55W6iKajZbZ0jB5Im0Byk3M&v=3.exp\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props => (\n  <GoogleMap defaultZoom={12} defaultCenter={{ lat: 37.7625, lng: -122.4 }}>\n    {props.isMarkerShown && (\n      <Marker\n        position={{ lat: 37.797, lng: -122.444 }}\n        onClick={props.onMarkerClick}\n      />\n    )}\n    <Polyline\n      path={props.coords}\n      onClick={props.onLineClick}\n      geodesic={true}\n      options={{\n        strokeColor: colorFromName(props.name),\n        strokeOpacity: 0.5,\n        strokeWeight: 4.5,\n        zIndex: 1\n      }}\n    />\n  </GoogleMap>\n));\n\nexport default MapComponent;\n","const readFile = filename => {\n  const folder = \"./assets/data/\";\n  return fetch(folder + filename).then(response => {\n    if (response.status === 200) {\n      return response;\n    } else {\n      throw new Error(`${response.status} code!`);\n    }\n  });\n};\n\nexport default readFile;\n","import React from \"react\";\n\nimport MapComponent from \"./MapComponent\";\nimport readFile from \"../methods/readFile\";\n\nclass MyMap extends React.PureComponent {\n  state = {\n    isMarkerShown: false,\n    coords: [],\n    data: {},\n    name: \"\"\n  };\n\n  componentDidMount() {\n    this.delayedShowMarker();\n  }\n\n  componentWillMount() {\n    readFile(\"2016-07-02--11-56-24.json\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          data,\n          coords: data.coords,\n          name: data.start_time\n        });\n        return data;\n      })\n      .catch(console.log);\n  }\n\n  delayedShowMarker = () => {\n    setTimeout(() => {\n      this.setState({ isMarkerShown: false }); //set true for the Marker to be Shown\n    }, 3000);\n  };\n\n  handleMarkerClick = () => {\n    this.setState({ isMarkerShown: false });\n    this.delayedShowMarker();\n  };\n\n  handleLineClick = e => {\n    console.log(e);\n  };\n\n  render() {\n    return (\n      <MapComponent\n        isMarkerShown={this.state.isMarkerShown}\n        onMarkerClick={this.handleMarkerClick}\n        coords={this.state.coords}\n        onLineClick={this.handleLineClick}\n        name={this.state.name}\n      />\n    );\n  }\n}\nexport default MyMap;\n","import React, { Component } from \"react\";\nimport MyMap from \"./components/MyMap\";\n\nclass App extends Component {\n  render() {\n    return <MyMap />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}