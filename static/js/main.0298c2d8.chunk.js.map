{"version":3,"sources":["components/MapComponent.jsx","components/MyMap.jsx","components/TripInfo.jsx","methods/helpers.js","components/TripCards.jsx","methods/readFile.js","App.jsx","serviceWorker.js","index.jsx"],"names":["MapComponent","compose","withProps","googleMapURL","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","props","lib","defaultZoom","defaultCenter","lat","lng","isMarkerShown","position","onClick","onMarkerClick","path","coords","onLineClick","geodesic","options","strokeColor","color","strokeOpacity","strokeWeight","zIndex","MyMap","_this$props","this","components_MapComponent","React","PureComponent","Meta","Card","TripInfo","loading","index","title","length","distance","speed_avg","text","content","popover","placement","trigger","card","width","margin","hoverable","skeleton","avatar","active","backgroundColor","verticalAlign","fontSize","textShadow","size","description","concat","helpers","colorFromName","name","str","col_str","Math","floor","abs","split","reduce","b","charCodeAt","toString","nameFromDate","substring","replace","parseDate","Date","parse","lengthFromInterval","start","end","ms","sec","hour","min","h_s","m_s","s_s","findByCoords","sq","x","dst","prev","next","TripCards","trips","_props$data","data","start_time","end_time","dist","toFixed","map","speed","push","components_TripInfo","key","readFile","filename","fetch","then","response","status","Error","App","state","handleLineClick","e","latLng","currentData","_this","console","log","siderStyle","overflowY","_this2","json","setState","catch","_this$state","row","col","span","components_MyMap","bind","components_TripCards","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0298c2d8.chunk.js","sourcesContent":["import React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  Polyline\n} from \"react-google-maps\";\n\nconst MapComponent = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDu2lXe6b5E55W6iKajZbZ0jB5Im0Byk3M&v=3.exp\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `100vh` }} />,\n    mapElement: <div style={{ height: `100%` }} />\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props => (\n  <GoogleMap defaultZoom={11} defaultCenter={{ lat: 37.6555, lng: -122.4 }}>\n    {props.isMarkerShown && (\n      <Marker\n        position={{ lat: 37.797, lng: -122.444 }}\n        onClick={props.onMarkerClick}\n      />\n    )}\n    <Polyline\n      path={props.coords}\n      onClick={props.onLineClick}\n      geodesic={true}\n      options={{\n        strokeColor: props.color,\n        strokeOpacity: 0.5,\n        strokeWeight: 4.5,\n        zIndex: 1\n      }}\n    />\n  </GoogleMap>\n));\n\nexport default MapComponent;\n","import React from \"react\";\nimport MapComponent from \"./MapComponent\";\n\nclass MyMap extends React.PureComponent {\n  componentWillMount() {}\n\n  render() {\n    const { coords, color, onLineClick } = this.props;\n    return (\n      <MapComponent coords={coords} onLineClick={onLineClick} color={color} />\n    );\n  }\n}\nexport default MyMap;\n","import React from \"react\";\nimport { Popover, Card, Skeleton, Avatar } from \"antd\";\n\nconst { Meta } = Card;\n\nconst TripInfo = props => {\n  const { loading, index, color, title, length, distance, speed_avg } = props;\n  const text = <span>Trip #{index + 1}</span>;\n  const content = (\n    <div>\n      <p>\n        Total distance: <b>{distance}</b> miles.\n      </p>\n      <p>\n        Average speed: <b>{speed_avg}</b> mph.\n      </p>\n    </div>\n  );\n  return (\n    <Popover placement=\"left\" title={text} content={content} trigger=\"hover\">\n      <Card\n        style={{ width: \"100%\", margin: \"auto\" }}\n        //actions={[<Icon type=\"eye\" />, <Icon type=\"car\" />]}\n        hoverable={true}\n      >\n        <Skeleton loading={loading} avatar active>\n          <Meta\n            avatar={\n              <Avatar\n                style={{\n                  backgroundColor: color,\n                  verticalAlign: \"middle\",\n                  fontSize: 10,\n                  textShadow:\n                    \"-1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444, 1px 1px 0 #444\",\n                  color: \"rgba(255,255,255,0.8)\"\n                }}\n                size=\"large\"\n              >\n                {index + 1}\n              </Avatar>\n            }\n            title={title}\n            description={`Lasted for ${length}`}\n          />\n        </Skeleton>\n      </Card>\n    </Popover>\n  );\n};\n\nexport default TripInfo;\n","export default class helpers {\n  static colorFromName = name => {\n    const getHash = str =>\n      str\n        ? str.split(\"\").reduce((a, b) => {\n            a = (a << 5) - a + b.charCodeAt(0);\n            return a & a;\n          }, 0)\n        : \"\";\n    let num = Math.floor(15239017 * Math.abs(getHash(name))) % 16777215;\n    let col_str = num.toString(16);\n    while (col_str.length < 6) col_str = \"0\" + col_str;\n    return \"#\" + col_str;\n  };\n\n  static nameFromDate = str =>\n    str.substring(0, 10) + \" \" + str.substring(11).replace(\"-\", \":\");\n\n  static parseDate = str =>\n    Date.parse(\n      str.substring(0, 10) + \" \" + str.substring(11).replace(\"-\", \":\")\n    );\n\n  static lengthFromInterval = (start, end) => {\n    let ms = helpers.parseDate(end) - helpers.parseDate(start);\n    let sec = Math.floor(ms / 1000);\n    let hour = Math.floor(sec / 3600);\n    sec -= hour * 3600;\n    let min = Math.floor(sec / 60);\n    sec -= min * 60;\n    let h_s = hour > 0 ? `${hour} hour${hour > 1 ? \"s\" : \"\"}` : ``;\n    let m_s = min > 0 ? `${min} minute${min > 1 ? \"s\" : \"\"}` : ``;\n    let s_s =\n      sec > 0 || (hour === 0 && min === 0)\n        ? `${sec} second${min > 1 ? \"s\" : \"\"}`\n        : ``;\n    return (\n      h_s +\n      (min || sec ? \" \" : \"\") +\n      m_s +\n      (sec && !(hour && min) ? \" \" : \"\") +\n      (hour && min ? \"\" : s_s) +\n      \".\"\n    );\n  };\n\n  static findByCoords = (lat, lng, coords) => {\n    let sq = x => x * x;\n    let dst = x => sq(x.lat - lat) + sq(x.lng - lng);\n    return coords.reduce(\n      (prev, next) => (dst(prev) < dst(next) ? prev : next),\n      coords[0]\n    );\n  };\n}\n","import React from \"react\";\nimport TripInfo from \"./TripInfo\";\nimport helpers from \"../methods/helpers\";\n\nconst TripCards = props => {\n  const trips = [];\n  const { loading, color } = props;\n  const { start_time, end_time, coords } = props.data;\n  let distance = (coords.length ? coords[coords.length - 1].dist : 0.0).toFixed(\n    2\n  );\n  let speed_avg = (coords.length\n    ? coords.map(x => x.speed).reduce((a, b) => a + b, 0) / coords.length\n    : 0\n  ).toFixed(2);\n  trips.push(\n    <TripInfo\n      loading={loading}\n      index={0}\n      key={0}\n      title={helpers.nameFromDate(start_time)}\n      color={color}\n      length={helpers.lengthFromInterval(start_time, end_time)}\n      distance={distance}\n      speed_avg={speed_avg}\n    />\n  );\n  return trips;\n};\n\nexport default TripCards;\n","const readFile = filename => {\n  const folder = \"./assets/data/\";\n  return fetch(folder + filename).then(response => {\n    if (response.status === 200) {\n      return response;\n    } else {\n      throw new Error(`${response.status} code!`);\n    }\n  });\n};\n\nexport default readFile;\n","import React, { Component } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Row, Col } from \"antd\";\n\nimport MyMap from \"./components/MyMap\";\nimport TripCards from \"./components/TripCards\";\nimport readFile from \"./methods/readFile\";\nimport helpers from \"./methods/helpers\";\n\nclass App extends Component {\n  state = {\n    data: {\n      coords: [],\n      start_time: \"\",\n      end_time: \"\"\n    },\n    loading: true,\n    color: \"\"\n  };\n  componentWillMount() {\n    readFile(\"2016-07-02--11-56-24.json\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          data,\n          loading: false,\n          color: helpers.colorFromName(data.start_time)\n        });\n        return data;\n      })\n      .catch(console.log);\n  }\n\n  handleLineClick = e => {\n    let lat = e.latLng.lat();\n    let lng = e.latLng.lng();\n    let currentData = helpers.findByCoords(lat, lng, this.state.data.coords);\n    console.log(currentData);\n  };\n\n  siderStyle = {\n    height: \"100vh\",\n    overflowY: \"scroll\"\n  };\n  render() {\n    const { coords } = this.state.data;\n    const { color, loading } = this.state;\n    return (\n      <Row>\n        <Col span={18}>\n          <MyMap\n            coords={coords}\n            color={color}\n            onLineClick={this.handleLineClick.bind(this)}\n          />\n        </Col>\n        <Col span={6} style={this.siderStyle}>\n          <TripCards loading={loading} color={color} data={this.state.data} />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}